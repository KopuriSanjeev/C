History of C.
-------------

1. constants, variables and data types:



constant:  can't be changed.
It is an value which doesn't change.
eg: 10,15,20.5


variable: can be changed
It is a place holder/container of constants. This may vary.


data type: type of variable we are giving. eg int



constant.
10	--> it will not change at all. pocket,wallet, purse etc.

20
50
100

purse/wallet :  contants values.  value in wallet will change.
100
500
3000

data type: 
data type of a variable defines what type of data is going to be stored and how much space is required to store that variable.

int a = 100 ;		integer data.	2 bytes of memory.

int -> data type
a -> variable
100 - > constant.


float b = 22.12;


values should be stored in your computer.

type of box
space for that box

--------------------------------------

operators, operands

eg: arithematic operator, + - * / %

Operators:
Operators are special symbols which perform some operation on operands.

which can perform operations on operands.

Operands:
operands may be variables or constants on which operator performs some operation.

a = b + 10;

+ -> operator.
b , 10 -> operands.

3 types of operators:

1. Unary operator: which requires single operand.
eg: 
a = 10; --> assignment operator

increment or decrement operator.
a++;	// increase value of a by 1.

b--;	// increase value of b by 1.


2. Binary operator: which requires 2 operands.

a = b + c ;

3. Ternary operator: which requires 3 operands.
eg: conditional operator:

? : 

int a = (10==20) ? 20 : 30 ;

-------------------------------------


in conditions, 1 (any no other than 0) is treated as true
0 is considered as false.

#include <stdio.h>
int main()
{
    if(-3)              // 1, 0, +ve, -ve
        printf("if");
    else    
        printf("else");

    return 0;
}

%d	-> int
%f 	-> float

signed -> -ve and +ve

int  a;	signed

unsigned -> +ve


increment -> increases value by 1

pre increment and post increment.

pre increment -> first value will be incremented and rest of the operations later.		++a
increment 
a = 10+1 = 11
next step is assigning value of a in to b -> 11

post increment -> rest of operations first and increment last.							a++
rest of operations first. assigning -> b = 10
last operation is increment - > a = 10+1 = 11

------------------------------------------------------


condition statements:
if 
if else


if(<statement which will return either true of false>)
{
	// true, if will be executed.

}
else
{
	// false, else will be executed.

}

standalone if is valid.
standalone else with out if is invalid.


1.	program is valid or not.
syntatical mistakes. compilation issues.

2.  run time errors.

3. output

------------------------------------ Math.h and math functions -----------------------------------



sqrt()	math.h	Calculates the square root of a floating-point value


pow()	math.h	Returns the result of a floating-point value raised to a
certain power

abs()	stdlib.h	Returns the absolute value (positive value) of an integer


floor()	math.h	Rounds up a floating-point value to the next whole number
(nonfractional) value


ceil()	math.h	Rounds down a floating-point value to the next whole
number


floor(2.5) -> 2.0
floor(-2.5) -> -3.0
ceil(2.5) - > 3.0
ceil(-2.5) -> -2.0


round(10.99) -> 11.0
round(10.50) -> 11.0
round(10.09) -> 10.0

round(-10.99) -> -11.0


absolute -> abs()
Returns the absolute value (positive value) of an integer

input		output

5			5
-5			5
0			0




Write a C program to determine whether a number is a perfect square or not.
eg: 25 -> yes
30 -> no


----------------------------------------------------------------------------------------------
